ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"bldc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.DMA1_Channel1_IRQHandler,"ax",%progbits
  18              		.align	1
  19              		.global	DMA1_Channel1_IRQHandler
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	DMA1_Channel1_IRQHandler:
  25              	.LFB66:
  26              		.file 1 "Src/bldc.c"
   1:Src/bldc.c    **** /*
   2:Src/bldc.c    **** * This file implements FOC motor control.
   3:Src/bldc.c    **** * This control method offers superior performanace
   4:Src/bldc.c    **** * compared to previous cummutation method. The new method features:
   5:Src/bldc.c    **** * ► reduced noise and vibrations
   6:Src/bldc.c    **** * ► smooth torque output
   7:Src/bldc.c    **** * ► improved motor efficiency -> lower energy consumption
   8:Src/bldc.c    **** *
   9:Src/bldc.c    **** * Copyright (C) 2019-2020 Emanuel FERU <aerdronix@gmail.com>
  10:Src/bldc.c    **** *
  11:Src/bldc.c    **** * This program is free software: you can redistribute it and/or modify
  12:Src/bldc.c    **** * it under the terms of the GNU General Public License as published by
  13:Src/bldc.c    **** * the Free Software Foundation, either version 3 of the License, or
  14:Src/bldc.c    **** * (at your option) any later version.
  15:Src/bldc.c    **** *
  16:Src/bldc.c    **** * This program is distributed in the hope that it will be useful,
  17:Src/bldc.c    **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  18:Src/bldc.c    **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  19:Src/bldc.c    **** * GNU General Public License for more details.
  20:Src/bldc.c    **** *
  21:Src/bldc.c    **** * You should have received a copy of the GNU General Public License
  22:Src/bldc.c    **** * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  23:Src/bldc.c    **** */
  24:Src/bldc.c    **** 
  25:Src/bldc.c    **** #include "stm32f1xx_hal.h"
  26:Src/bldc.c    **** #include "defines.h"
  27:Src/bldc.c    **** #include "setup.h"
  28:Src/bldc.c    **** #include "config.h"
  29:Src/bldc.c    **** #include "util.h"
  30:Src/bldc.c    **** 
  31:Src/bldc.c    **** // Matlab includes and defines - from auto-code generation
  32:Src/bldc.c    **** // ###############################################################################
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 2


  33:Src/bldc.c    **** #include "BLDC_controller.h"           /* Model's header file */
  34:Src/bldc.c    **** #include "rtwtypes.h"
  35:Src/bldc.c    **** 
  36:Src/bldc.c    **** extern RT_MODEL *const rtM_Left;
  37:Src/bldc.c    **** extern RT_MODEL *const rtM_Right;
  38:Src/bldc.c    **** 
  39:Src/bldc.c    **** extern DW   rtDW_Left;                  /* Observable states */
  40:Src/bldc.c    **** extern ExtU rtU_Left;                   /* External inputs */
  41:Src/bldc.c    **** extern ExtY rtY_Left;                   /* External outputs */
  42:Src/bldc.c    **** extern P    rtP_Left;
  43:Src/bldc.c    **** 
  44:Src/bldc.c    **** extern DW   rtDW_Right;                 /* Observable states */
  45:Src/bldc.c    **** extern ExtU rtU_Right;                  /* External inputs */
  46:Src/bldc.c    **** extern ExtY rtY_Right;                  /* External outputs */
  47:Src/bldc.c    **** // ###############################################################################
  48:Src/bldc.c    **** 
  49:Src/bldc.c    **** static int16_t pwm_margin;              /* This margin allows to have a window in the PWM signal fo
  50:Src/bldc.c    **** 
  51:Src/bldc.c    **** extern uint8_t ctrlModReq;
  52:Src/bldc.c    **** static int16_t curDC_max = (I_DC_MAX * A2BIT_CONV);
  53:Src/bldc.c    **** int16_t curL_phaA = 0, curL_phaB = 0, curL_DC = 0;
  54:Src/bldc.c    **** int16_t curR_phaB = 0, curR_phaC = 0, curR_DC = 0;
  55:Src/bldc.c    **** 
  56:Src/bldc.c    **** volatile int pwml = 0;
  57:Src/bldc.c    **** volatile int pwmr = 0;
  58:Src/bldc.c    **** 
  59:Src/bldc.c    **** extern volatile adc_buf_t adc_buffer;
  60:Src/bldc.c    **** 
  61:Src/bldc.c    **** uint8_t buzzerFreq          = 0;
  62:Src/bldc.c    **** uint8_t buzzerPattern       = 0;
  63:Src/bldc.c    **** uint8_t buzzerCount         = 0;
  64:Src/bldc.c    **** volatile uint32_t buzzerTimer = 0;
  65:Src/bldc.c    **** static uint8_t  buzzerPrev  = 0;
  66:Src/bldc.c    **** static uint8_t  buzzerIdx   = 0;
  67:Src/bldc.c    **** 
  68:Src/bldc.c    **** uint8_t        enable       = 0;        // initially motors are disabled for SAFETY
  69:Src/bldc.c    **** static uint8_t enableFin    = 0;
  70:Src/bldc.c    **** 
  71:Src/bldc.c    **** static const uint16_t pwm_res  = 64000000 / 2 / PWM_FREQ; // = 2000
  72:Src/bldc.c    **** 
  73:Src/bldc.c    **** static uint16_t offsetcount = 0;
  74:Src/bldc.c    **** static int16_t offsetrlA    = 2000;
  75:Src/bldc.c    **** static int16_t offsetrlB    = 2000;
  76:Src/bldc.c    **** static int16_t offsetrrB    = 2000;
  77:Src/bldc.c    **** static int16_t offsetrrC    = 2000;
  78:Src/bldc.c    **** static int16_t offsetdcl    = 2000;
  79:Src/bldc.c    **** static int16_t offsetdcr    = 2000;
  80:Src/bldc.c    **** 
  81:Src/bldc.c    **** int16_t        batVoltage       = (400 * BAT_CELLS * BAT_CALIB_ADC) / BAT_CALIB_REAL_VOLTAGE;
  82:Src/bldc.c    **** static int32_t batVoltageFixdt  = (400 * BAT_CELLS * BAT_CALIB_ADC) / BAT_CALIB_REAL_VOLTAGE << 16;
  83:Src/bldc.c    **** 
  84:Src/bldc.c    **** // =================================
  85:Src/bldc.c    **** // DMA interrupt frequency =~ 16 kHz
  86:Src/bldc.c    **** // =================================
  87:Src/bldc.c    **** void DMA1_Channel1_IRQHandler(void) {
  27              		.loc 1 87 37 view -0
  28              		.cfi_startproc
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 3


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  88:Src/bldc.c    **** 
  89:Src/bldc.c    ****   DMA1->IFCR = DMA_IFCR_CTCIF1;
  31              		.loc 1 89 3 view .LVU1
  32              		.loc 1 89 14 is_stmt 0 view .LVU2
  33 0000 994B     		ldr	r3, .L46
  34 0002 0222     		movs	r2, #2
  35 0004 5A60     		str	r2, [r3, #4]
  90:Src/bldc.c    ****   // HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);
  91:Src/bldc.c    ****   // HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
  92:Src/bldc.c    **** 
  93:Src/bldc.c    ****   if(offsetcount < 2000) {  // calibrate ADC offsets
  36              		.loc 1 93 3 is_stmt 1 view .LVU3
  37              		.loc 1 93 18 is_stmt 0 view .LVU4
  38 0006 994B     		ldr	r3, .L46+4
  39 0008 1B88     		ldrh	r3, [r3]
  40              		.loc 1 93 5 view .LVU5
  41 000a B3F5FA6F 		cmp	r3, #2000
  42 000e C0F0A080 		bcc	.L42
  87:Src/bldc.c    **** 
  43              		.loc 1 87 37 view .LVU6
  44 0012 10B5     		push	{r4, lr}
  45              	.LCFI0:
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 14, -4
  94:Src/bldc.c    ****     offsetcount++;
  95:Src/bldc.c    ****     offsetrlA = (adc_buffer.rlA + offsetrlA) / 2;
  96:Src/bldc.c    ****     offsetrlB = (adc_buffer.rlB + offsetrlB) / 2;
  97:Src/bldc.c    ****     offsetrrB = (adc_buffer.rrB + offsetrrB) / 2;
  98:Src/bldc.c    ****     offsetrrC = (adc_buffer.rrC + offsetrrC) / 2;
  99:Src/bldc.c    ****     offsetdcl = (adc_buffer.dcl + offsetdcl) / 2;
 100:Src/bldc.c    ****     offsetdcr = (adc_buffer.dcr + offsetdcr) / 2;
 101:Src/bldc.c    ****     return;
 102:Src/bldc.c    ****   }
 103:Src/bldc.c    **** 
 104:Src/bldc.c    ****   if (buzzerTimer % 1000 == 0) {  // Filter battery voltage at a slower sampling rate
  49              		.loc 1 104 3 is_stmt 1 view .LVU7
  50              		.loc 1 104 19 is_stmt 0 view .LVU8
  51 0014 964B     		ldr	r3, .L46+8
  52 0016 1A68     		ldr	r2, [r3]
  53 0018 964B     		ldr	r3, .L46+12
  54 001a A3FB0213 		umull	r1, r3, r3, r2
  55 001e 9B09     		lsrs	r3, r3, #6
  56 0020 4FF47A71 		mov	r1, #1000
  57 0024 01FB1323 		mls	r3, r1, r3, r2
  58              		.loc 1 104 6 view .LVU9
  59 0028 002B     		cmp	r3, #0
  60 002a 00F0D380 		beq	.L43
  61              	.L4:
 105:Src/bldc.c    ****     filtLowPass32(adc_buffer.batt1, BAT_FILT_COEF, &batVoltageFixdt);
 106:Src/bldc.c    ****     batVoltage = (int16_t)(batVoltageFixdt >> 16);  // convert fixed-point to integer
 107:Src/bldc.c    ****   }
 108:Src/bldc.c    **** 
 109:Src/bldc.c    ****   // Get Left motor currents
 110:Src/bldc.c    ****   curL_phaA = (int16_t)(offsetrlA - adc_buffer.rlA);
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 4


  62              		.loc 1 110 3 is_stmt 1 view .LVU10
  63              		.loc 1 110 47 is_stmt 0 view .LVU11
  64 002e 924B     		ldr	r3, .L46+16
  65 0030 9A88     		ldrh	r2, [r3, #4]
  66 0032 91B2     		uxth	r1, r2
  67              		.loc 1 110 35 view .LVU12
  68 0034 914A     		ldr	r2, .L46+20
  69 0036 1288     		ldrh	r2, [r2]
  70 0038 521A     		subs	r2, r2, r1
  71              		.loc 1 110 13 view .LVU13
  72 003a 9149     		ldr	r1, .L46+24
  73 003c 0A80     		strh	r2, [r1]	@ movhi
 111:Src/bldc.c    ****   curL_phaB = (int16_t)(offsetrlB - adc_buffer.rlB);
  74              		.loc 1 111 3 is_stmt 1 view .LVU14
  75              		.loc 1 111 47 is_stmt 0 view .LVU15
  76 003e DA88     		ldrh	r2, [r3, #6]
  77 0040 91B2     		uxth	r1, r2
  78              		.loc 1 111 35 view .LVU16
  79 0042 904A     		ldr	r2, .L46+28
  80 0044 1288     		ldrh	r2, [r2]
  81 0046 521A     		subs	r2, r2, r1
  82              		.loc 1 111 13 view .LVU17
  83 0048 8F49     		ldr	r1, .L46+32
  84 004a 0A80     		strh	r2, [r1]	@ movhi
 112:Src/bldc.c    ****   curL_DC   = (int16_t)(offsetdcl - adc_buffer.dcl);
  85              		.loc 1 112 3 is_stmt 1 view .LVU18
  86              		.loc 1 112 47 is_stmt 0 view .LVU19
  87 004c 5A88     		ldrh	r2, [r3, #2]
  88 004e 91B2     		uxth	r1, r2
  89              		.loc 1 112 35 view .LVU20
  90 0050 8E4A     		ldr	r2, .L46+36
  91 0052 1288     		ldrh	r2, [r2]
  92 0054 521A     		subs	r2, r2, r1
  93              		.loc 1 112 15 view .LVU21
  94 0056 12B2     		sxth	r2, r2
  95              		.loc 1 112 13 view .LVU22
  96 0058 8D49     		ldr	r1, .L46+40
  97 005a 0A80     		strh	r2, [r1]	@ movhi
 113:Src/bldc.c    ****   
 114:Src/bldc.c    ****   // Get Right motor currents
 115:Src/bldc.c    ****   curR_phaB = (int16_t)(offsetrrB - adc_buffer.rrB);
  98              		.loc 1 115 3 is_stmt 1 view .LVU23
  99              		.loc 1 115 47 is_stmt 0 view .LVU24
 100 005c 1989     		ldrh	r1, [r3, #8]
 101 005e 88B2     		uxth	r0, r1
 102              		.loc 1 115 35 view .LVU25
 103 0060 8C49     		ldr	r1, .L46+44
 104 0062 0988     		ldrh	r1, [r1]
 105 0064 091A     		subs	r1, r1, r0
 106              		.loc 1 115 13 view .LVU26
 107 0066 8C48     		ldr	r0, .L46+48
 108 0068 0180     		strh	r1, [r0]	@ movhi
 116:Src/bldc.c    ****   curR_phaC = (int16_t)(offsetrrC - adc_buffer.rrC);
 109              		.loc 1 116 3 is_stmt 1 view .LVU27
 110              		.loc 1 116 47 is_stmt 0 view .LVU28
 111 006a 5989     		ldrh	r1, [r3, #10]
 112 006c 88B2     		uxth	r0, r1
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 5


 113              		.loc 1 116 35 view .LVU29
 114 006e 8B49     		ldr	r1, .L46+52
 115 0070 0988     		ldrh	r1, [r1]
 116 0072 091A     		subs	r1, r1, r0
 117              		.loc 1 116 13 view .LVU30
 118 0074 8A48     		ldr	r0, .L46+56
 119 0076 0180     		strh	r1, [r0]	@ movhi
 117:Src/bldc.c    ****   curR_DC   = (int16_t)(offsetdcr - adc_buffer.dcr);
 120              		.loc 1 117 3 is_stmt 1 view .LVU31
 121              		.loc 1 117 47 is_stmt 0 view .LVU32
 122 0078 1B88     		ldrh	r3, [r3]
 123 007a 99B2     		uxth	r1, r3
 124              		.loc 1 117 35 view .LVU33
 125 007c 894B     		ldr	r3, .L46+60
 126 007e 1B88     		ldrh	r3, [r3]
 127 0080 5B1A     		subs	r3, r3, r1
 128              		.loc 1 117 15 view .LVU34
 129 0082 1BB2     		sxth	r3, r3
 130              		.loc 1 117 13 view .LVU35
 131 0084 8849     		ldr	r1, .L46+64
 132 0086 0B80     		strh	r3, [r1]	@ movhi
 118:Src/bldc.c    **** 
 119:Src/bldc.c    ****   // Disable PWM when current limit is reached (current chopping)
 120:Src/bldc.c    ****   // This is the Level 2 of current protection. The Level 1 should kick in first given by I_MOT_MAX
 121:Src/bldc.c    ****   if(ABS(curL_DC) > curDC_max || enable == 0) {
 133              		.loc 1 121 3 is_stmt 1 view .LVU36
 134              		.loc 1 121 6 is_stmt 0 view .LVU37
 135 0088 002A     		cmp	r2, #0
 136 008a B8BF     		it	lt
 137 008c 5242     		rsblt	r2, r2, #0
 138 008e 92B2     		uxth	r2, r2
 139              		.loc 1 121 5 view .LVU38
 140 0090 40F25231 		movw	r1, #850
 141 0094 8A42     		cmp	r2, r1
 142 0096 04D8     		bhi	.L5
 143              		.loc 1 121 41 discriminator 1 view .LVU39
 144 0098 844A     		ldr	r2, .L46+68
 145 009a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 146              		.loc 1 121 31 discriminator 1 view .LVU40
 147 009c 002A     		cmp	r2, #0
 148 009e 40F0A780 		bne	.L6
 149              	.L5:
 122:Src/bldc.c    ****     LEFT_TIM->BDTR &= ~TIM_BDTR_MOE;
 150              		.loc 1 122 5 is_stmt 1 view .LVU41
 151              		.loc 1 122 20 is_stmt 0 view .LVU42
 152 00a2 8349     		ldr	r1, .L46+72
 153 00a4 4A6C     		ldr	r2, [r1, #68]
 154 00a6 22F40042 		bic	r2, r2, #32768
 155 00aa 4A64     		str	r2, [r1, #68]
 156              	.L7:
 123:Src/bldc.c    ****   } else {
 124:Src/bldc.c    ****     LEFT_TIM->BDTR |= TIM_BDTR_MOE;
 125:Src/bldc.c    ****   }
 126:Src/bldc.c    **** 
 127:Src/bldc.c    ****   if(ABS(curR_DC)  > curDC_max || enable == 0) {
 157              		.loc 1 127 3 is_stmt 1 view .LVU43
 158              		.loc 1 127 6 is_stmt 0 view .LVU44
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 6


 159 00ac 002B     		cmp	r3, #0
 160 00ae B8BF     		it	lt
 161 00b0 5B42     		rsblt	r3, r3, #0
 162 00b2 9BB2     		uxth	r3, r3
 163              		.loc 1 127 5 view .LVU45
 164 00b4 40F25232 		movw	r2, #850
 165 00b8 9342     		cmp	r3, r2
 166 00ba 04D8     		bhi	.L8
 167              		.loc 1 127 42 discriminator 1 view .LVU46
 168 00bc 7B4B     		ldr	r3, .L46+68
 169 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 170              		.loc 1 127 32 discriminator 1 view .LVU47
 171 00c0 002B     		cmp	r3, #0
 172 00c2 40F09B80 		bne	.L9
 173              	.L8:
 128:Src/bldc.c    ****     RIGHT_TIM->BDTR &= ~TIM_BDTR_MOE;
 174              		.loc 1 128 5 is_stmt 1 view .LVU48
 175              		.loc 1 128 21 is_stmt 0 view .LVU49
 176 00c6 7B4A     		ldr	r2, .L46+76
 177 00c8 536C     		ldr	r3, [r2, #68]
 178 00ca 23F40043 		bic	r3, r3, #32768
 179 00ce 5364     		str	r3, [r2, #68]
 180              	.L10:
 129:Src/bldc.c    ****   } else {
 130:Src/bldc.c    ****     RIGHT_TIM->BDTR |= TIM_BDTR_MOE;
 131:Src/bldc.c    ****   }
 132:Src/bldc.c    **** 
 133:Src/bldc.c    ****   // Create square wave for buzzer
 134:Src/bldc.c    ****   buzzerTimer++;
 181              		.loc 1 134 3 is_stmt 1 view .LVU50
 182              		.loc 1 134 14 is_stmt 0 view .LVU51
 183 00d0 674A     		ldr	r2, .L46+8
 184 00d2 1368     		ldr	r3, [r2]
 185 00d4 0133     		adds	r3, r3, #1
 186 00d6 1360     		str	r3, [r2]
 135:Src/bldc.c    ****   if (buzzerFreq != 0 && (buzzerTimer / 5000) % (buzzerPattern + 1) == 0) {
 187              		.loc 1 135 3 is_stmt 1 view .LVU52
 188              		.loc 1 135 18 is_stmt 0 view .LVU53
 189 00d8 774B     		ldr	r3, .L46+80
 190 00da 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 191              		.loc 1 135 6 view .LVU54
 192 00dc 002A     		cmp	r2, #0
 193 00de 00F09380 		beq	.L11
 194              		.loc 1 135 39 discriminator 1 view .LVU55
 195 00e2 634B     		ldr	r3, .L46+8
 196 00e4 1B68     		ldr	r3, [r3]
 197 00e6 7549     		ldr	r1, .L46+84
 198 00e8 A1FB0313 		umull	r1, r3, r1, r3
 199 00ec 1B0B     		lsrs	r3, r3, #12
 200              		.loc 1 135 64 discriminator 1 view .LVU56
 201 00ee 7449     		ldr	r1, .L46+88
 202 00f0 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 203 00f2 0131     		adds	r1, r1, #1
 204              		.loc 1 135 47 discriminator 1 view .LVU57
 205 00f4 B3FBF1F0 		udiv	r0, r3, r1
 206 00f8 01FB1033 		mls	r3, r1, r0, r3
 207              		.loc 1 135 23 discriminator 1 view .LVU58
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 7


 208 00fc 002B     		cmp	r3, #0
 209 00fe 40F08380 		bne	.L11
 136:Src/bldc.c    ****     if (buzzerPrev == 0) {
 210              		.loc 1 136 5 is_stmt 1 view .LVU59
 211              		.loc 1 136 20 is_stmt 0 view .LVU60
 212 0102 704B     		ldr	r3, .L46+92
 213 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 214              		.loc 1 136 8 view .LVU61
 215 0106 7BB9     		cbnz	r3, .L12
 137:Src/bldc.c    ****       buzzerPrev = 1;
 216              		.loc 1 137 7 is_stmt 1 view .LVU62
 217              		.loc 1 137 18 is_stmt 0 view .LVU63
 218 0108 6E4B     		ldr	r3, .L46+92
 219 010a 0121     		movs	r1, #1
 220 010c 1970     		strb	r1, [r3]
 138:Src/bldc.c    ****       if (++buzzerIdx > (buzzerCount + 2)) {    // pause 2 periods
 221              		.loc 1 138 7 is_stmt 1 view .LVU64
 222              		.loc 1 138 11 is_stmt 0 view .LVU65
 223 010e 6E49     		ldr	r1, .L46+96
 224 0110 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 225 0112 0133     		adds	r3, r3, #1
 226 0114 DBB2     		uxtb	r3, r3
 227              		.loc 1 138 10 view .LVU66
 228 0116 0B70     		strb	r3, [r1]
 229              		.loc 1 138 38 view .LVU67
 230 0118 6C49     		ldr	r1, .L46+100
 231 011a 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 232 011c 0231     		adds	r1, r1, #2
 233              		.loc 1 138 10 view .LVU68
 234 011e 8B42     		cmp	r3, r1
 235 0120 02DD     		ble	.L12
 139:Src/bldc.c    ****         buzzerIdx = 1;
 236              		.loc 1 139 9 is_stmt 1 view .LVU69
 237              		.loc 1 139 19 is_stmt 0 view .LVU70
 238 0122 694B     		ldr	r3, .L46+96
 239 0124 0121     		movs	r1, #1
 240 0126 1970     		strb	r1, [r3]
 241              	.L12:
 140:Src/bldc.c    ****       }
 141:Src/bldc.c    ****     }
 142:Src/bldc.c    ****     if (buzzerTimer % buzzerFreq == 0 && (buzzerIdx <= buzzerCount || buzzerCount == 0)) {
 242              		.loc 1 142 5 is_stmt 1 view .LVU71
 243              		.loc 1 142 21 is_stmt 0 view .LVU72
 244 0128 514B     		ldr	r3, .L46+8
 245 012a 1B68     		ldr	r3, [r3]
 246 012c B3FBF2F1 		udiv	r1, r3, r2
 247 0130 02FB1133 		mls	r3, r2, r1, r3
 248              		.loc 1 142 8 view .LVU73
 249 0134 002B     		cmp	r3, #0
 250 0136 6AD1     		bne	.L13
 251              		.loc 1 142 53 discriminator 1 view .LVU74
 252 0138 634B     		ldr	r3, .L46+96
 253 013a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 254 013c 634B     		ldr	r3, .L46+100
 255 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 256              		.loc 1 142 39 discriminator 1 view .LVU75
 257 0140 9A42     		cmp	r2, r3
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 8


 258 0142 01D9     		bls	.L14
 259              		.loc 1 142 68 discriminator 2 view .LVU76
 260 0144 002B     		cmp	r3, #0
 261 0146 62D1     		bne	.L13
 262              	.L14:
 143:Src/bldc.c    ****       HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 263              		.loc 1 143 7 is_stmt 1 view .LVU77
 264 0148 1021     		movs	r1, #16
 265 014a 6148     		ldr	r0, .L46+104
 266 014c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 267              	.LVL0:
 268 0150 5DE0     		b	.L13
 269              	.L42:
 270              	.LCFI1:
 271              		.cfi_def_cfa_offset 0
 272              		.cfi_restore 4
 273              		.cfi_restore 14
  94:Src/bldc.c    ****     offsetrlA = (adc_buffer.rlA + offsetrlA) / 2;
 274              		.loc 1 94 5 view .LVU78
  94:Src/bldc.c    ****     offsetrlA = (adc_buffer.rlA + offsetrlA) / 2;
 275              		.loc 1 94 16 is_stmt 0 view .LVU79
 276 0152 0133     		adds	r3, r3, #1
 277 0154 454A     		ldr	r2, .L46+4
 278 0156 1380     		strh	r3, [r2]	@ movhi
  95:Src/bldc.c    ****     offsetrlB = (adc_buffer.rlB + offsetrlB) / 2;
 279              		.loc 1 95 5 is_stmt 1 view .LVU80
  95:Src/bldc.c    ****     offsetrlB = (adc_buffer.rlB + offsetrlB) / 2;
 280              		.loc 1 95 28 is_stmt 0 view .LVU81
 281 0158 474A     		ldr	r2, .L46+16
 282 015a 9388     		ldrh	r3, [r2, #4]
 283 015c 99B2     		uxth	r1, r3
  95:Src/bldc.c    ****     offsetrlB = (adc_buffer.rlB + offsetrlB) / 2;
 284              		.loc 1 95 33 view .LVU82
 285 015e 4748     		ldr	r0, .L46+20
 286 0160 B0F90030 		ldrsh	r3, [r0]
 287 0164 0B44     		add	r3, r3, r1
  95:Src/bldc.c    ****     offsetrlB = (adc_buffer.rlB + offsetrlB) / 2;
 288              		.loc 1 95 46 view .LVU83
 289 0166 03EBD373 		add	r3, r3, r3, lsr #31
 290 016a 5B10     		asrs	r3, r3, #1
  95:Src/bldc.c    ****     offsetrlB = (adc_buffer.rlB + offsetrlB) / 2;
 291              		.loc 1 95 15 view .LVU84
 292 016c 0380     		strh	r3, [r0]	@ movhi
  96:Src/bldc.c    ****     offsetrrB = (adc_buffer.rrB + offsetrrB) / 2;
 293              		.loc 1 96 5 is_stmt 1 view .LVU85
  96:Src/bldc.c    ****     offsetrrB = (adc_buffer.rrB + offsetrrB) / 2;
 294              		.loc 1 96 28 is_stmt 0 view .LVU86
 295 016e D388     		ldrh	r3, [r2, #6]
 296 0170 99B2     		uxth	r1, r3
  96:Src/bldc.c    ****     offsetrrB = (adc_buffer.rrB + offsetrrB) / 2;
 297              		.loc 1 96 33 view .LVU87
 298 0172 4448     		ldr	r0, .L46+28
 299 0174 B0F90030 		ldrsh	r3, [r0]
 300 0178 0B44     		add	r3, r3, r1
  96:Src/bldc.c    ****     offsetrrB = (adc_buffer.rrB + offsetrrB) / 2;
 301              		.loc 1 96 46 view .LVU88
 302 017a 03EBD373 		add	r3, r3, r3, lsr #31
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 9


 303 017e 5B10     		asrs	r3, r3, #1
  96:Src/bldc.c    ****     offsetrrB = (adc_buffer.rrB + offsetrrB) / 2;
 304              		.loc 1 96 15 view .LVU89
 305 0180 0380     		strh	r3, [r0]	@ movhi
  97:Src/bldc.c    ****     offsetrrC = (adc_buffer.rrC + offsetrrC) / 2;
 306              		.loc 1 97 5 is_stmt 1 view .LVU90
  97:Src/bldc.c    ****     offsetrrC = (adc_buffer.rrC + offsetrrC) / 2;
 307              		.loc 1 97 28 is_stmt 0 view .LVU91
 308 0182 1389     		ldrh	r3, [r2, #8]
 309 0184 99B2     		uxth	r1, r3
  97:Src/bldc.c    ****     offsetrrC = (adc_buffer.rrC + offsetrrC) / 2;
 310              		.loc 1 97 33 view .LVU92
 311 0186 4348     		ldr	r0, .L46+44
 312 0188 B0F90030 		ldrsh	r3, [r0]
 313 018c 0B44     		add	r3, r3, r1
  97:Src/bldc.c    ****     offsetrrC = (adc_buffer.rrC + offsetrrC) / 2;
 314              		.loc 1 97 46 view .LVU93
 315 018e 03EBD373 		add	r3, r3, r3, lsr #31
 316 0192 5B10     		asrs	r3, r3, #1
  97:Src/bldc.c    ****     offsetrrC = (adc_buffer.rrC + offsetrrC) / 2;
 317              		.loc 1 97 15 view .LVU94
 318 0194 0380     		strh	r3, [r0]	@ movhi
  98:Src/bldc.c    ****     offsetdcl = (adc_buffer.dcl + offsetdcl) / 2;
 319              		.loc 1 98 5 is_stmt 1 view .LVU95
  98:Src/bldc.c    ****     offsetdcl = (adc_buffer.dcl + offsetdcl) / 2;
 320              		.loc 1 98 28 is_stmt 0 view .LVU96
 321 0196 5389     		ldrh	r3, [r2, #10]
 322 0198 99B2     		uxth	r1, r3
  98:Src/bldc.c    ****     offsetdcl = (adc_buffer.dcl + offsetdcl) / 2;
 323              		.loc 1 98 33 view .LVU97
 324 019a 4048     		ldr	r0, .L46+52
 325 019c B0F90030 		ldrsh	r3, [r0]
 326 01a0 0B44     		add	r3, r3, r1
  98:Src/bldc.c    ****     offsetdcl = (adc_buffer.dcl + offsetdcl) / 2;
 327              		.loc 1 98 46 view .LVU98
 328 01a2 03EBD373 		add	r3, r3, r3, lsr #31
 329 01a6 5B10     		asrs	r3, r3, #1
  98:Src/bldc.c    ****     offsetdcl = (adc_buffer.dcl + offsetdcl) / 2;
 330              		.loc 1 98 15 view .LVU99
 331 01a8 0380     		strh	r3, [r0]	@ movhi
  99:Src/bldc.c    ****     offsetdcr = (adc_buffer.dcr + offsetdcr) / 2;
 332              		.loc 1 99 5 is_stmt 1 view .LVU100
  99:Src/bldc.c    ****     offsetdcr = (adc_buffer.dcr + offsetdcr) / 2;
 333              		.loc 1 99 28 is_stmt 0 view .LVU101
 334 01aa 5388     		ldrh	r3, [r2, #2]
 335 01ac 99B2     		uxth	r1, r3
  99:Src/bldc.c    ****     offsetdcr = (adc_buffer.dcr + offsetdcr) / 2;
 336              		.loc 1 99 33 view .LVU102
 337 01ae 3748     		ldr	r0, .L46+36
 338 01b0 B0F90030 		ldrsh	r3, [r0]
 339 01b4 0B44     		add	r3, r3, r1
  99:Src/bldc.c    ****     offsetdcr = (adc_buffer.dcr + offsetdcr) / 2;
 340              		.loc 1 99 46 view .LVU103
 341 01b6 03EBD373 		add	r3, r3, r3, lsr #31
 342 01ba 5B10     		asrs	r3, r3, #1
  99:Src/bldc.c    ****     offsetdcr = (adc_buffer.dcr + offsetdcr) / 2;
 343              		.loc 1 99 15 view .LVU104
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 10


 344 01bc 0380     		strh	r3, [r0]	@ movhi
 100:Src/bldc.c    ****     return;
 345              		.loc 1 100 5 is_stmt 1 view .LVU105
 100:Src/bldc.c    ****     return;
 346              		.loc 1 100 28 is_stmt 0 view .LVU106
 347 01be 1388     		ldrh	r3, [r2]
 348 01c0 9AB2     		uxth	r2, r3
 100:Src/bldc.c    ****     return;
 349              		.loc 1 100 33 view .LVU107
 350 01c2 3849     		ldr	r1, .L46+60
 351 01c4 B1F90030 		ldrsh	r3, [r1]
 352 01c8 1344     		add	r3, r3, r2
 100:Src/bldc.c    ****     return;
 353              		.loc 1 100 46 view .LVU108
 354 01ca 03EBD373 		add	r3, r3, r3, lsr #31
 355 01ce 5B10     		asrs	r3, r3, #1
 100:Src/bldc.c    ****     return;
 356              		.loc 1 100 15 view .LVU109
 357 01d0 0B80     		strh	r3, [r1]	@ movhi
 101:Src/bldc.c    ****   }
 358              		.loc 1 101 5 is_stmt 1 view .LVU110
 359 01d2 7047     		bx	lr
 360              	.L43:
 361              	.LCFI2:
 362              		.cfi_def_cfa_offset 8
 363              		.cfi_offset 4, -8
 364              		.cfi_offset 14, -4
 105:Src/bldc.c    ****     batVoltage = (int16_t)(batVoltageFixdt >> 16);  // convert fixed-point to integer
 365              		.loc 1 105 5 view .LVU111
 105:Src/bldc.c    ****     batVoltage = (int16_t)(batVoltageFixdt >> 16);  // convert fixed-point to integer
 366              		.loc 1 105 29 is_stmt 0 view .LVU112
 367 01d4 284B     		ldr	r3, .L46+16
 368 01d6 9889     		ldrh	r0, [r3, #12]
 105:Src/bldc.c    ****     batVoltage = (int16_t)(batVoltageFixdt >> 16);  // convert fixed-point to integer
 369              		.loc 1 105 5 view .LVU113
 370 01d8 3E4C     		ldr	r4, .L46+108
 371 01da 2246     		mov	r2, r4
 372 01dc 40F28F21 		movw	r1, #655
 373 01e0 80B2     		uxth	r0, r0
 374 01e2 FFF7FEFF 		bl	filtLowPass32
 375              	.LVL1:
 106:Src/bldc.c    ****   }
 376              		.loc 1 106 5 is_stmt 1 view .LVU114
 106:Src/bldc.c    ****   }
 377              		.loc 1 106 18 is_stmt 0 view .LVU115
 378 01e6 B4F90220 		ldrsh	r2, [r4, #2]
 106:Src/bldc.c    ****   }
 379              		.loc 1 106 16 view .LVU116
 380 01ea 3B4B     		ldr	r3, .L46+112
 381 01ec 1A80     		strh	r2, [r3]	@ movhi
 382 01ee 1EE7     		b	.L4
 383              	.L6:
 124:Src/bldc.c    ****   }
 384              		.loc 1 124 5 is_stmt 1 view .LVU117
 124:Src/bldc.c    ****   }
 385              		.loc 1 124 20 is_stmt 0 view .LVU118
 386 01f0 2F49     		ldr	r1, .L46+72
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 11


 387 01f2 4A6C     		ldr	r2, [r1, #68]
 388 01f4 42F40042 		orr	r2, r2, #32768
 389 01f8 4A64     		str	r2, [r1, #68]
 390 01fa 57E7     		b	.L7
 391              	.L9:
 130:Src/bldc.c    ****   }
 392              		.loc 1 130 5 is_stmt 1 view .LVU119
 130:Src/bldc.c    ****   }
 393              		.loc 1 130 21 is_stmt 0 view .LVU120
 394 01fc 2D4A     		ldr	r2, .L46+76
 395 01fe 536C     		ldr	r3, [r2, #68]
 396 0200 43F40043 		orr	r3, r3, #32768
 397 0204 5364     		str	r3, [r2, #68]
 398 0206 63E7     		b	.L10
 399              	.L11:
 144:Src/bldc.c    ****     }
 145:Src/bldc.c    ****   } else if (buzzerPrev) {
 400              		.loc 1 145 10 is_stmt 1 view .LVU121
 401              		.loc 1 145 14 is_stmt 0 view .LVU122
 402 0208 2E4B     		ldr	r3, .L46+92
 403 020a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 404              		.loc 1 145 13 view .LVU123
 405 020c FBB9     		cbnz	r3, .L44
 406              	.L13:
 146:Src/bldc.c    ****       HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 147:Src/bldc.c    ****       buzzerPrev = 0;
 148:Src/bldc.c    ****   }
 149:Src/bldc.c    **** 
 150:Src/bldc.c    ****   // Adjust pwm_margin depending on the selected Control Type
 151:Src/bldc.c    ****   if (rtP_Left.z_ctrlTypSel == FOC_CTRL) {
 407              		.loc 1 151 3 is_stmt 1 view .LVU124
 408              		.loc 1 151 15 is_stmt 0 view .LVU125
 409 020e 334B     		ldr	r3, .L46+116
 410 0210 93F8F930 		ldrb	r3, [r3, #249]	@ zero_extendqisi2
 411              		.loc 1 151 6 view .LVU126
 412 0214 022B     		cmp	r3, #2
 413 0216 23D0     		beq	.L45
 152:Src/bldc.c    ****     pwm_margin = 110;
 153:Src/bldc.c    ****   } else {
 154:Src/bldc.c    ****     pwm_margin = 0;
 414              		.loc 1 154 5 is_stmt 1 view .LVU127
 415              		.loc 1 154 16 is_stmt 0 view .LVU128
 416 0218 314B     		ldr	r3, .L46+120
 417 021a 0022     		movs	r2, #0
 418 021c 1A80     		strh	r2, [r3]	@ movhi
 419              	.L16:
 155:Src/bldc.c    ****   }
 156:Src/bldc.c    **** 
 157:Src/bldc.c    ****   // ############################### MOTOR CONTROL ###############################
 158:Src/bldc.c    **** 
 159:Src/bldc.c    ****   int ul, vl, wl;
 420              		.loc 1 159 3 is_stmt 1 view .LVU129
 160:Src/bldc.c    ****   int ur, vr, wr;
 421              		.loc 1 160 3 view .LVU130
 161:Src/bldc.c    ****   static boolean_T OverrunFlag = false;
 422              		.loc 1 161 3 view .LVU131
 162:Src/bldc.c    **** 
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 12


 163:Src/bldc.c    ****   /* Check for overrun */
 164:Src/bldc.c    ****   if (OverrunFlag) {
 423              		.loc 1 164 3 view .LVU132
 424              		.loc 1 164 7 is_stmt 0 view .LVU133
 425 021e 314B     		ldr	r3, .L46+124
 426 0220 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 427              		.loc 1 164 6 view .LVU134
 428 0222 002B     		cmp	r3, #0
 429 0224 40F00D81 		bne	.L1
 165:Src/bldc.c    ****     return;
 166:Src/bldc.c    ****   }
 167:Src/bldc.c    ****   OverrunFlag = true;
 430              		.loc 1 167 3 is_stmt 1 view .LVU135
 431              		.loc 1 167 15 is_stmt 0 view .LVU136
 432 0228 2E4B     		ldr	r3, .L46+124
 433 022a 0122     		movs	r2, #1
 434 022c 1A70     		strb	r2, [r3]
 168:Src/bldc.c    **** 
 169:Src/bldc.c    ****   /* Make sure to stop BOTH motors in case of an error */
 170:Src/bldc.c    ****   enableFin = enable && !rtY_Left.z_errCode && !rtY_Right.z_errCode;
 435              		.loc 1 170 3 is_stmt 1 view .LVU137
 436              		.loc 1 170 15 is_stmt 0 view .LVU138
 437 022e 1F4B     		ldr	r3, .L46+68
 438 0230 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 439              		.loc 1 170 45 view .LVU139
 440 0232 002B     		cmp	r3, #0
 441 0234 5CD0     		beq	.L36
 442              		.loc 1 170 34 discriminator 1 view .LVU140
 443 0236 2C4B     		ldr	r3, .L46+128
 444 0238 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 445              		.loc 1 170 22 discriminator 1 view .LVU141
 446 023a 002B     		cmp	r3, #0
 447 023c 40F00281 		bne	.L37
 448              		.loc 1 170 58 discriminator 3 view .LVU142
 449 0240 2A4B     		ldr	r3, .L46+132
 450 0242 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 451              		.loc 1 170 45 discriminator 3 view .LVU143
 452 0244 002B     		cmp	r3, #0
 453 0246 00F0FF80 		beq	.L38
 454              		.loc 1 170 45 view .LVU144
 455 024a 0022     		movs	r2, #0
 456 024c 51E0     		b	.L17
 457              	.L44:
 146:Src/bldc.c    ****       buzzerPrev = 0;
 458              		.loc 1 146 7 is_stmt 1 view .LVU145
 459 024e 0022     		movs	r2, #0
 460 0250 1021     		movs	r1, #16
 461 0252 1F48     		ldr	r0, .L46+104
 462 0254 FFF7FEFF 		bl	HAL_GPIO_WritePin
 463              	.LVL2:
 147:Src/bldc.c    ****   }
 464              		.loc 1 147 7 view .LVU146
 147:Src/bldc.c    ****   }
 465              		.loc 1 147 18 is_stmt 0 view .LVU147
 466 0258 1A4B     		ldr	r3, .L46+92
 467 025a 0022     		movs	r2, #0
 468 025c 1A70     		strb	r2, [r3]
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 13


 469 025e D6E7     		b	.L13
 470              	.L45:
 152:Src/bldc.c    ****   } else {
 471              		.loc 1 152 5 is_stmt 1 view .LVU148
 152:Src/bldc.c    ****   } else {
 472              		.loc 1 152 16 is_stmt 0 view .LVU149
 473 0260 1F4B     		ldr	r3, .L46+120
 474 0262 6E22     		movs	r2, #110
 475 0264 1A80     		strh	r2, [r3]	@ movhi
 476 0266 DAE7     		b	.L16
 477              	.L47:
 478              		.align	2
 479              	.L46:
 480 0268 00000240 		.word	1073872896
 481 026c 00000000 		.word	.LANCHOR0
 482 0270 00000000 		.word	.LANCHOR7
 483 0274 D34D6210 		.word	274877907
 484 0278 00000000 		.word	adc_buffer
 485 027c 00000000 		.word	.LANCHOR1
 486 0280 00000000 		.word	.LANCHOR10
 487 0284 00000000 		.word	.LANCHOR2
 488 0288 00000000 		.word	.LANCHOR11
 489 028c 00000000 		.word	.LANCHOR5
 490 0290 00000000 		.word	.LANCHOR12
 491 0294 00000000 		.word	.LANCHOR3
 492 0298 00000000 		.word	.LANCHOR13
 493 029c 00000000 		.word	.LANCHOR4
 494 02a0 00000000 		.word	.LANCHOR14
 495 02a4 00000000 		.word	.LANCHOR6
 496 02a8 00000000 		.word	.LANCHOR15
 497 02ac 00000000 		.word	.LANCHOR16
 498 02b0 00340140 		.word	1073820672
 499 02b4 002C0140 		.word	1073818624
 500 02b8 00000000 		.word	.LANCHOR17
 501 02bc 5917B7D1 		.word	-776530087
 502 02c0 00000000 		.word	.LANCHOR18
 503 02c4 00000000 		.word	.LANCHOR19
 504 02c8 00000000 		.word	.LANCHOR20
 505 02cc 00000000 		.word	.LANCHOR21
 506 02d0 00080140 		.word	1073809408
 507 02d4 00000000 		.word	.LANCHOR8
 508 02d8 00000000 		.word	.LANCHOR9
 509 02dc 00000000 		.word	rtP_Left
 510 02e0 00000000 		.word	.LANCHOR22
 511 02e4 00000000 		.word	.LANCHOR23
 512 02e8 00000000 		.word	rtY_Left
 513 02ec 00000000 		.word	rtY_Right
 514              	.L36:
 515              		.loc 1 170 45 view .LVU150
 516 02f0 0022     		movs	r2, #0
 517              	.L17:
 518              		.loc 1 170 13 discriminator 8 view .LVU151
 519 02f2 D2B2     		uxtb	r2, r2
 520 02f4 6D4B     		ldr	r3, .L48
 521 02f6 1A70     		strb	r2, [r3]
 171:Src/bldc.c    ****  
 172:Src/bldc.c    ****   // ========================= LEFT MOTOR ============================ 
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 14


 173:Src/bldc.c    ****     // Get hall sensors values
 174:Src/bldc.c    ****     uint8_t hall_ul = !(LEFT_HALL_U_PORT->IDR & LEFT_HALL_U_PIN);
 522              		.loc 1 174 5 is_stmt 1 discriminator 8 view .LVU152
 523              		.loc 1 174 41 is_stmt 0 discriminator 8 view .LVU153
 524 02f8 6D4B     		ldr	r3, .L48+4
 525 02fa 9968     		ldr	r1, [r3, #8]
 526              		.loc 1 174 23 discriminator 8 view .LVU154
 527 02fc 11F0200F 		tst	r1, #32
 528 0300 0CBF     		ite	eq
 529 0302 0124     		moveq	r4, #1
 530 0304 0024     		movne	r4, #0
 531              	.LVL3:
 175:Src/bldc.c    ****     uint8_t hall_vl = !(LEFT_HALL_V_PORT->IDR & LEFT_HALL_V_PIN);
 532              		.loc 1 175 5 is_stmt 1 discriminator 8 view .LVU155
 533              		.loc 1 175 41 is_stmt 0 discriminator 8 view .LVU156
 534 0306 9968     		ldr	r1, [r3, #8]
 535              		.loc 1 175 23 discriminator 8 view .LVU157
 536 0308 11F0400F 		tst	r1, #64
 537 030c 0CBF     		ite	eq
 538 030e 0120     		moveq	r0, #1
 539 0310 0020     		movne	r0, #0
 540              	.LVL4:
 176:Src/bldc.c    ****     uint8_t hall_wl = !(LEFT_HALL_W_PORT->IDR & LEFT_HALL_W_PIN);
 541              		.loc 1 176 5 is_stmt 1 discriminator 8 view .LVU158
 542              		.loc 1 176 41 is_stmt 0 discriminator 8 view .LVU159
 543 0312 9B68     		ldr	r3, [r3, #8]
 544              		.loc 1 176 23 discriminator 8 view .LVU160
 545 0314 13F0800F 		tst	r3, #128
 546 0318 0CBF     		ite	eq
 547 031a 0121     		moveq	r1, #1
 548 031c 0021     		movne	r1, #0
 549              	.LVL5:
 177:Src/bldc.c    **** 
 178:Src/bldc.c    ****     /* Set motor inputs here */
 179:Src/bldc.c    ****     rtU_Left.b_motEna     = enableFin;
 550              		.loc 1 179 5 is_stmt 1 discriminator 8 view .LVU161
 551              		.loc 1 179 27 is_stmt 0 discriminator 8 view .LVU162
 552 031e 654B     		ldr	r3, .L48+8
 553 0320 1A70     		strb	r2, [r3]
 180:Src/bldc.c    ****     rtU_Left.z_ctrlModReq = ctrlModReq;  
 554              		.loc 1 180 5 is_stmt 1 discriminator 8 view .LVU163
 555              		.loc 1 180 27 is_stmt 0 discriminator 8 view .LVU164
 556 0322 654A     		ldr	r2, .L48+12
 557 0324 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 558 0326 5A70     		strb	r2, [r3, #1]
 181:Src/bldc.c    ****     rtU_Left.r_inpTgt     = pwml;
 559              		.loc 1 181 5 is_stmt 1 discriminator 8 view .LVU165
 560              		.loc 1 181 27 is_stmt 0 discriminator 8 view .LVU166
 561 0328 644A     		ldr	r2, .L48+16
 562 032a 1268     		ldr	r2, [r2]
 563 032c 5A80     		strh	r2, [r3, #2]	@ movhi
 182:Src/bldc.c    ****     rtU_Left.b_hallA      = hall_ul;
 564              		.loc 1 182 5 is_stmt 1 discriminator 8 view .LVU167
 565              		.loc 1 182 27 is_stmt 0 discriminator 8 view .LVU168
 566 032e 1C71     		strb	r4, [r3, #4]
 183:Src/bldc.c    ****     rtU_Left.b_hallB      = hall_vl;
 567              		.loc 1 183 5 is_stmt 1 discriminator 8 view .LVU169
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 15


 568              		.loc 1 183 27 is_stmt 0 discriminator 8 view .LVU170
 569 0330 5871     		strb	r0, [r3, #5]
 184:Src/bldc.c    ****     rtU_Left.b_hallC      = hall_wl;
 570              		.loc 1 184 5 is_stmt 1 discriminator 8 view .LVU171
 571              		.loc 1 184 27 is_stmt 0 discriminator 8 view .LVU172
 572 0332 9971     		strb	r1, [r3, #6]
 185:Src/bldc.c    ****     rtU_Left.i_phaAB      = curL_phaA;
 573              		.loc 1 185 5 is_stmt 1 discriminator 8 view .LVU173
 574              		.loc 1 185 27 is_stmt 0 discriminator 8 view .LVU174
 575 0334 624A     		ldr	r2, .L48+20
 576 0336 1288     		ldrh	r2, [r2]
 577 0338 1A81     		strh	r2, [r3, #8]	@ movhi
 186:Src/bldc.c    ****     rtU_Left.i_phaBC      = curL_phaB;
 578              		.loc 1 186 5 is_stmt 1 discriminator 8 view .LVU175
 579              		.loc 1 186 27 is_stmt 0 discriminator 8 view .LVU176
 580 033a 624A     		ldr	r2, .L48+24
 581 033c 1288     		ldrh	r2, [r2]
 582 033e 5A81     		strh	r2, [r3, #10]	@ movhi
 187:Src/bldc.c    ****     rtU_Left.i_DCLink     = curL_DC;
 583              		.loc 1 187 5 is_stmt 1 discriminator 8 view .LVU177
 584              		.loc 1 187 27 is_stmt 0 discriminator 8 view .LVU178
 585 0340 614A     		ldr	r2, .L48+28
 586 0342 1288     		ldrh	r2, [r2]
 587 0344 9A81     		strh	r2, [r3, #12]	@ movhi
 188:Src/bldc.c    ****     // rtU_Left.a_mechAngle   = ...; // Angle input in DEGREES [0,360] in fixdt(1,16,4) data type. 
 189:Src/bldc.c    ****     
 190:Src/bldc.c    ****     /* Step the controller */
 191:Src/bldc.c    ****     #ifdef MOTOR_LEFT_ENA    
 192:Src/bldc.c    ****     BLDC_controller_step(rtM_Left);
 588              		.loc 1 192 5 is_stmt 1 discriminator 8 view .LVU179
 589 0346 614B     		ldr	r3, .L48+32
 590 0348 1868     		ldr	r0, [r3]
 591              	.LVL6:
 592              		.loc 1 192 5 is_stmt 0 discriminator 8 view .LVU180
 593 034a FFF7FEFF 		bl	BLDC_controller_step
 594              	.LVL7:
 193:Src/bldc.c    ****     #endif
 194:Src/bldc.c    **** 
 195:Src/bldc.c    ****     /* Get motor outputs here */
 196:Src/bldc.c    ****     ul            = rtY_Left.DC_phaA;
 595              		.loc 1 196 5 is_stmt 1 discriminator 8 view .LVU181
 596              		.loc 1 196 29 is_stmt 0 discriminator 8 view .LVU182
 597 034e 604B     		ldr	r3, .L48+36
 598 0350 B3F90010 		ldrsh	r1, [r3]
 599              	.LVL8:
 197:Src/bldc.c    ****     vl            = rtY_Left.DC_phaB;
 600              		.loc 1 197 5 is_stmt 1 discriminator 8 view .LVU183
 601              		.loc 1 197 29 is_stmt 0 discriminator 8 view .LVU184
 602 0354 B3F90220 		ldrsh	r2, [r3, #2]
 603              	.LVL9:
 198:Src/bldc.c    ****     wl            = rtY_Left.DC_phaC;
 604              		.loc 1 198 5 is_stmt 1 discriminator 8 view .LVU185
 605              		.loc 1 198 29 is_stmt 0 discriminator 8 view .LVU186
 606 0358 B3F904C0 		ldrsh	ip, [r3, #4]
 607              	.LVL10:
 199:Src/bldc.c    ****   // errCodeLeft  = rtY_Left.z_errCode;
 200:Src/bldc.c    ****   // motSpeedLeft = rtY_Left.n_mot;
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 16


 201:Src/bldc.c    ****   // motAngleLeft = rtY_Left.a_elecAngle;
 202:Src/bldc.c    **** 
 203:Src/bldc.c    ****     /* Apply commands */
 204:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_U    = (uint16_t)CLAMP(ul + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 608              		.loc 1 204 5 is_stmt 1 discriminator 8 view .LVU187
 609              		.loc 1 204 41 is_stmt 0 discriminator 8 view .LVU188
 610 035c 01F2E734 		addw	r4, r1, #999
 611              	.LVL11:
 612              		.loc 1 204 41 discriminator 8 view .LVU189
 613 0360 5C4B     		ldr	r3, .L48+40
 614 0362 B3F90030 		ldrsh	r3, [r3]
 615 0366 C3F5FA60 		rsb	r0, r3, #2000
 616              		.loc 1 204 31 discriminator 8 view .LVU190
 617 036a 8442     		cmp	r4, r0
 618 036c 6EDB     		blt	.L18
 619              		.loc 1 204 41 discriminator 1 view .LVU191
 620 036e 81B2     		uxth	r1, r0
 621              	.LVL12:
 622              	.L19:
 623              		.loc 1 204 29 discriminator 8 view .LVU192
 624 0370 594C     		ldr	r4, .L48+44
 625 0372 6163     		str	r1, [r4, #52]
 626              	.LVL13:
 205:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_V    = (uint16_t)CLAMP(vl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 627              		.loc 1 205 5 is_stmt 1 discriminator 8 view .LVU193
 628              		.loc 1 205 41 is_stmt 0 discriminator 8 view .LVU194
 629 0374 02F2E731 		addw	r1, r2, #999
 630              		.loc 1 205 31 discriminator 8 view .LVU195
 631 0378 8842     		cmp	r0, r1
 632 037a 6FDC     		bgt	.L21
 633              		.loc 1 205 41 discriminator 1 view .LVU196
 634 037c C3F5FA62 		rsb	r2, r3, #2000
 635              	.LVL14:
 636              		.loc 1 205 41 discriminator 1 view .LVU197
 637 0380 92B2     		uxth	r2, r2
 638              	.LVL15:
 639              	.L22:
 640              		.loc 1 205 29 discriminator 8 view .LVU198
 641 0382 5549     		ldr	r1, .L48+44
 642 0384 8A63     		str	r2, [r1, #56]
 206:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_W    = (uint16_t)CLAMP(wl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 643              		.loc 1 206 5 is_stmt 1 discriminator 8 view .LVU199
 644              		.loc 1 206 41 is_stmt 0 discriminator 8 view .LVU200
 645 0386 0CF2E732 		addw	r2, ip, #999
 646              		.loc 1 206 31 discriminator 8 view .LVU201
 647 038a 9042     		cmp	r0, r2
 648 038c 6EDC     		bgt	.L24
 649              		.loc 1 206 41 discriminator 1 view .LVU202
 650 038e C3F5FA63 		rsb	r3, r3, #2000
 651 0392 9BB2     		uxth	r3, r3
 652              	.L25:
 653              		.loc 1 206 29 discriminator 8 view .LVU203
 654 0394 504A     		ldr	r2, .L48+44
 655 0396 D363     		str	r3, [r2, #60]
 207:Src/bldc.c    ****   // =================================================================
 208:Src/bldc.c    ****   
 209:Src/bldc.c    **** 
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 17


 210:Src/bldc.c    ****   // ========================= RIGHT MOTOR ===========================  
 211:Src/bldc.c    ****     // Get hall sensors values
 212:Src/bldc.c    ****     uint8_t hall_ur = !(RIGHT_HALL_U_PORT->IDR & RIGHT_HALL_U_PIN);
 656              		.loc 1 212 5 is_stmt 1 discriminator 8 view .LVU204
 657              		.loc 1 212 42 is_stmt 0 discriminator 8 view .LVU205
 658 0398 504B     		ldr	r3, .L48+48
 659 039a 9A68     		ldr	r2, [r3, #8]
 660              		.loc 1 212 23 discriminator 8 view .LVU206
 661 039c 12F4806F 		tst	r2, #1024
 662 03a0 0CBF     		ite	eq
 663 03a2 0120     		moveq	r0, #1
 664 03a4 0020     		movne	r0, #0
 665              	.LVL16:
 213:Src/bldc.c    ****     uint8_t hall_vr = !(RIGHT_HALL_V_PORT->IDR & RIGHT_HALL_V_PIN);
 666              		.loc 1 213 5 is_stmt 1 discriminator 8 view .LVU207
 667              		.loc 1 213 42 is_stmt 0 discriminator 8 view .LVU208
 668 03a6 9A68     		ldr	r2, [r3, #8]
 669              		.loc 1 213 23 discriminator 8 view .LVU209
 670 03a8 12F4006F 		tst	r2, #2048
 671 03ac 0CBF     		ite	eq
 672 03ae 0121     		moveq	r1, #1
 673 03b0 0021     		movne	r1, #0
 674              	.LVL17:
 214:Src/bldc.c    ****     uint8_t hall_wr = !(RIGHT_HALL_W_PORT->IDR & RIGHT_HALL_W_PIN);
 675              		.loc 1 214 5 is_stmt 1 discriminator 8 view .LVU210
 676              		.loc 1 214 42 is_stmt 0 discriminator 8 view .LVU211
 677 03b2 9B68     		ldr	r3, [r3, #8]
 678              		.loc 1 214 23 discriminator 8 view .LVU212
 679 03b4 13F4805F 		tst	r3, #4096
 680 03b8 0CBF     		ite	eq
 681 03ba 0122     		moveq	r2, #1
 682 03bc 0022     		movne	r2, #0
 683              	.LVL18:
 215:Src/bldc.c    **** 
 216:Src/bldc.c    ****     /* Set motor inputs here */
 217:Src/bldc.c    ****     rtU_Right.b_motEna      = enableFin;
 684              		.loc 1 217 5 is_stmt 1 discriminator 8 view .LVU213
 685              		.loc 1 217 29 is_stmt 0 discriminator 8 view .LVU214
 686 03be 484B     		ldr	r3, .L48+52
 687 03c0 3A4C     		ldr	r4, .L48
 688 03c2 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 689 03c4 1C70     		strb	r4, [r3]
 218:Src/bldc.c    ****     rtU_Right.z_ctrlModReq  = ctrlModReq;
 690              		.loc 1 218 5 is_stmt 1 discriminator 8 view .LVU215
 691              		.loc 1 218 29 is_stmt 0 discriminator 8 view .LVU216
 692 03c6 3C4C     		ldr	r4, .L48+12
 693 03c8 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 694 03ca 5C70     		strb	r4, [r3, #1]
 219:Src/bldc.c    ****     rtU_Right.r_inpTgt      = pwmr;
 695              		.loc 1 219 5 is_stmt 1 discriminator 8 view .LVU217
 696              		.loc 1 219 29 is_stmt 0 discriminator 8 view .LVU218
 697 03cc 454C     		ldr	r4, .L48+56
 698 03ce 2468     		ldr	r4, [r4]
 699 03d0 5C80     		strh	r4, [r3, #2]	@ movhi
 220:Src/bldc.c    ****     rtU_Right.b_hallA       = hall_ur;
 700              		.loc 1 220 5 is_stmt 1 discriminator 8 view .LVU219
 701              		.loc 1 220 29 is_stmt 0 discriminator 8 view .LVU220
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 18


 702 03d2 1871     		strb	r0, [r3, #4]
 221:Src/bldc.c    ****     rtU_Right.b_hallB       = hall_vr;
 703              		.loc 1 221 5 is_stmt 1 discriminator 8 view .LVU221
 704              		.loc 1 221 29 is_stmt 0 discriminator 8 view .LVU222
 705 03d4 5971     		strb	r1, [r3, #5]
 222:Src/bldc.c    ****     rtU_Right.b_hallC       = hall_wr;
 706              		.loc 1 222 5 is_stmt 1 discriminator 8 view .LVU223
 707              		.loc 1 222 29 is_stmt 0 discriminator 8 view .LVU224
 708 03d6 9A71     		strb	r2, [r3, #6]
 223:Src/bldc.c    ****     rtU_Right.i_phaAB       = curR_phaB;
 709              		.loc 1 223 5 is_stmt 1 discriminator 8 view .LVU225
 710              		.loc 1 223 29 is_stmt 0 discriminator 8 view .LVU226
 711 03d8 434A     		ldr	r2, .L48+60
 712              	.LVL19:
 713              		.loc 1 223 29 discriminator 8 view .LVU227
 714 03da 1288     		ldrh	r2, [r2]
 715 03dc 1A81     		strh	r2, [r3, #8]	@ movhi
 224:Src/bldc.c    ****     rtU_Right.i_phaBC       = curR_phaC;
 716              		.loc 1 224 5 is_stmt 1 discriminator 8 view .LVU228
 717              		.loc 1 224 29 is_stmt 0 discriminator 8 view .LVU229
 718 03de 434A     		ldr	r2, .L48+64
 719 03e0 1288     		ldrh	r2, [r2]
 720 03e2 5A81     		strh	r2, [r3, #10]	@ movhi
 225:Src/bldc.c    ****     rtU_Right.i_DCLink      = curR_DC;
 721              		.loc 1 225 5 is_stmt 1 discriminator 8 view .LVU230
 722              		.loc 1 225 29 is_stmt 0 discriminator 8 view .LVU231
 723 03e4 424A     		ldr	r2, .L48+68
 724 03e6 1288     		ldrh	r2, [r2]
 725 03e8 9A81     		strh	r2, [r3, #12]	@ movhi
 226:Src/bldc.c    ****     // rtU_Right.a_mechAngle   = ...; // Angle input in DEGREES [0,360] in fixdt(1,16,4) data type.
 227:Src/bldc.c    ****     
 228:Src/bldc.c    ****     /* Step the controller */
 229:Src/bldc.c    ****     #ifdef MOTOR_RIGHT_ENA
 230:Src/bldc.c    ****     BLDC_controller_step(rtM_Right);
 726              		.loc 1 230 5 is_stmt 1 discriminator 8 view .LVU232
 727 03ea 424B     		ldr	r3, .L48+72
 728              	.LVL20:
 729              		.loc 1 230 5 is_stmt 0 discriminator 8 view .LVU233
 730 03ec 1868     		ldr	r0, [r3]
 731              	.LVL21:
 732              		.loc 1 230 5 discriminator 8 view .LVU234
 733 03ee FFF7FEFF 		bl	BLDC_controller_step
 734              	.LVL22:
 231:Src/bldc.c    ****     #endif
 232:Src/bldc.c    **** 
 233:Src/bldc.c    ****     /* Get motor outputs here */
 234:Src/bldc.c    ****     ur            = rtY_Right.DC_phaA;
 735              		.loc 1 234 5 is_stmt 1 discriminator 8 view .LVU235
 736              		.loc 1 234 30 is_stmt 0 discriminator 8 view .LVU236
 737 03f2 414B     		ldr	r3, .L48+76
 738 03f4 B3F90010 		ldrsh	r1, [r3]
 739              	.LVL23:
 235:Src/bldc.c    ****     vr            = rtY_Right.DC_phaB;
 740              		.loc 1 235 5 is_stmt 1 discriminator 8 view .LVU237
 741              		.loc 1 235 30 is_stmt 0 discriminator 8 view .LVU238
 742 03f8 B3F90220 		ldrsh	r2, [r3, #2]
 743              	.LVL24:
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 19


 236:Src/bldc.c    ****     wr            = rtY_Right.DC_phaC;
 744              		.loc 1 236 5 is_stmt 1 discriminator 8 view .LVU239
 745              		.loc 1 236 30 is_stmt 0 discriminator 8 view .LVU240
 746 03fc B3F904C0 		ldrsh	ip, [r3, #4]
 747              	.LVL25:
 237:Src/bldc.c    ****  // errCodeRight  = rtY_Right.z_errCode;
 238:Src/bldc.c    ****  // motSpeedRight = rtY_Right.n_mot;
 239:Src/bldc.c    ****  // motAngleRight = rtY_Right.a_elecAngle;
 240:Src/bldc.c    **** 
 241:Src/bldc.c    ****     /* Apply commands */
 242:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_U  = (uint16_t)CLAMP(ur + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 748              		.loc 1 242 5 is_stmt 1 discriminator 8 view .LVU241
 749              		.loc 1 242 41 is_stmt 0 discriminator 8 view .LVU242
 750 0400 01F2E734 		addw	r4, r1, #999
 751 0404 334B     		ldr	r3, .L48+40
 752 0406 B3F90030 		ldrsh	r3, [r3]
 753 040a C3F5FA60 		rsb	r0, r3, #2000
 754              		.loc 1 242 31 discriminator 8 view .LVU243
 755 040e 8442     		cmp	r4, r0
 756 0410 34DB     		blt	.L27
 757              		.loc 1 242 41 discriminator 1 view .LVU244
 758 0412 81B2     		uxth	r1, r0
 759              	.LVL26:
 760              	.L28:
 761              		.loc 1 242 29 discriminator 8 view .LVU245
 762 0414 394C     		ldr	r4, .L48+80
 763 0416 6163     		str	r1, [r4, #52]
 764              	.LVL27:
 243:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_V  = (uint16_t)CLAMP(vr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 765              		.loc 1 243 5 is_stmt 1 discriminator 8 view .LVU246
 766              		.loc 1 243 41 is_stmt 0 discriminator 8 view .LVU247
 767 0418 02F2E731 		addw	r1, r2, #999
 768              		.loc 1 243 31 discriminator 8 view .LVU248
 769 041c 8842     		cmp	r0, r1
 770 041e 35DC     		bgt	.L30
 771              		.loc 1 243 41 discriminator 1 view .LVU249
 772 0420 C3F5FA62 		rsb	r2, r3, #2000
 773              	.LVL28:
 774              		.loc 1 243 41 discriminator 1 view .LVU250
 775 0424 92B2     		uxth	r2, r2
 776              	.LVL29:
 777              	.L31:
 778              		.loc 1 243 29 discriminator 8 view .LVU251
 779 0426 3549     		ldr	r1, .L48+80
 780 0428 8A63     		str	r2, [r1, #56]
 244:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_W  = (uint16_t)CLAMP(wr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 781              		.loc 1 244 5 is_stmt 1 discriminator 8 view .LVU252
 782              		.loc 1 244 41 is_stmt 0 discriminator 8 view .LVU253
 783 042a 0CF2E732 		addw	r2, ip, #999
 784              		.loc 1 244 31 discriminator 8 view .LVU254
 785 042e 9042     		cmp	r0, r2
 786 0430 34DC     		bgt	.L33
 787              		.loc 1 244 41 discriminator 1 view .LVU255
 788 0432 C3F5FA63 		rsb	r3, r3, #2000
 789 0436 9BB2     		uxth	r3, r3
 790              	.L34:
 791              		.loc 1 244 29 discriminator 8 view .LVU256
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 20


 792 0438 304A     		ldr	r2, .L48+80
 793 043a D363     		str	r3, [r2, #60]
 245:Src/bldc.c    ****   // =================================================================
 246:Src/bldc.c    **** 
 247:Src/bldc.c    ****   /* Indicate task complete */
 248:Src/bldc.c    ****   OverrunFlag = false;
 794              		.loc 1 248 3 is_stmt 1 discriminator 8 view .LVU257
 795              		.loc 1 248 15 is_stmt 0 discriminator 8 view .LVU258
 796 043c 304B     		ldr	r3, .L48+84
 797 043e 0022     		movs	r2, #0
 798 0440 1A70     		strb	r2, [r3]
 799              	.LVL30:
 800              	.L1:
 249:Src/bldc.c    ****  
 250:Src/bldc.c    ****  // ###############################################################################
 251:Src/bldc.c    **** 
 252:Src/bldc.c    **** }
 801              		.loc 1 252 1 view .LVU259
 802 0442 10BD     		pop	{r4, pc}
 803              	.L37:
 170:Src/bldc.c    ****  
 804              		.loc 1 170 45 view .LVU260
 805 0444 0022     		movs	r2, #0
 806 0446 54E7     		b	.L17
 807              	.L38:
 808 0448 0122     		movs	r2, #1
 809 044a 52E7     		b	.L17
 810              	.LVL31:
 811              	.L18:
 204:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_V    = (uint16_t)CLAMP(vl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 812              		.loc 1 204 41 discriminator 2 view .LVU261
 813 044c 01F57A74 		add	r4, r1, #1000
 204:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_V    = (uint16_t)CLAMP(vl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 814              		.loc 1 204 31 discriminator 2 view .LVU262
 815 0450 A342     		cmp	r3, r4
 816 0452 01DC     		bgt	.L20
 204:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_V    = (uint16_t)CLAMP(vl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 817              		.loc 1 204 41 discriminator 4 view .LVU263
 818 0454 A1B2     		uxth	r1, r4
 819              	.LVL32:
 204:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_V    = (uint16_t)CLAMP(vl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 820              		.loc 1 204 41 discriminator 4 view .LVU264
 821 0456 8BE7     		b	.L19
 822              	.LVL33:
 823              	.L20:
 204:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_V    = (uint16_t)CLAMP(vl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 824              		.loc 1 204 31 discriminator 5 view .LVU265
 825 0458 99B2     		uxth	r1, r3
 826              	.LVL34:
 204:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_V    = (uint16_t)CLAMP(vl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 827              		.loc 1 204 31 discriminator 5 view .LVU266
 828 045a 89E7     		b	.L19
 829              	.LVL35:
 830              	.L21:
 205:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_W    = (uint16_t)CLAMP(wl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 831              		.loc 1 205 41 discriminator 2 view .LVU267
 832 045c 02F57A71 		add	r1, r2, #1000
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 21


 205:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_W    = (uint16_t)CLAMP(wl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 833              		.loc 1 205 31 discriminator 2 view .LVU268
 834 0460 8B42     		cmp	r3, r1
 835 0462 01DC     		bgt	.L23
 205:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_W    = (uint16_t)CLAMP(wl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 836              		.loc 1 205 41 discriminator 4 view .LVU269
 837 0464 8AB2     		uxth	r2, r1
 838              	.LVL36:
 205:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_W    = (uint16_t)CLAMP(wl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 839              		.loc 1 205 41 discriminator 4 view .LVU270
 840 0466 8CE7     		b	.L22
 841              	.LVL37:
 842              	.L23:
 205:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_W    = (uint16_t)CLAMP(wl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 843              		.loc 1 205 31 discriminator 5 view .LVU271
 844 0468 9AB2     		uxth	r2, r3
 845              	.LVL38:
 205:Src/bldc.c    ****     LEFT_TIM->LEFT_TIM_W    = (uint16_t)CLAMP(wl + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 846              		.loc 1 205 31 discriminator 5 view .LVU272
 847 046a 8AE7     		b	.L22
 848              	.LVL39:
 849              	.L24:
 206:Src/bldc.c    ****   // =================================================================
 850              		.loc 1 206 41 discriminator 2 view .LVU273
 851 046c 0CF57A72 		add	r2, ip, #1000
 206:Src/bldc.c    ****   // =================================================================
 852              		.loc 1 206 31 discriminator 2 view .LVU274
 853 0470 9342     		cmp	r3, r2
 854 0472 01DC     		bgt	.L26
 206:Src/bldc.c    ****   // =================================================================
 855              		.loc 1 206 41 discriminator 4 view .LVU275
 856 0474 93B2     		uxth	r3, r2
 857 0476 8DE7     		b	.L25
 858              	.L26:
 206:Src/bldc.c    ****   // =================================================================
 859              		.loc 1 206 31 discriminator 5 view .LVU276
 860 0478 9BB2     		uxth	r3, r3
 861 047a 8BE7     		b	.L25
 862              	.LVL40:
 863              	.L27:
 242:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_V  = (uint16_t)CLAMP(vr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 864              		.loc 1 242 41 discriminator 2 view .LVU277
 865 047c 01F57A74 		add	r4, r1, #1000
 242:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_V  = (uint16_t)CLAMP(vr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 866              		.loc 1 242 31 discriminator 2 view .LVU278
 867 0480 A342     		cmp	r3, r4
 868 0482 01DC     		bgt	.L29
 242:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_V  = (uint16_t)CLAMP(vr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 869              		.loc 1 242 41 discriminator 4 view .LVU279
 870 0484 A1B2     		uxth	r1, r4
 871              	.LVL41:
 242:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_V  = (uint16_t)CLAMP(vr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 872              		.loc 1 242 41 discriminator 4 view .LVU280
 873 0486 C5E7     		b	.L28
 874              	.LVL42:
 875              	.L29:
 242:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_V  = (uint16_t)CLAMP(vr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 22


 876              		.loc 1 242 31 discriminator 5 view .LVU281
 877 0488 99B2     		uxth	r1, r3
 878              	.LVL43:
 242:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_V  = (uint16_t)CLAMP(vr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 879              		.loc 1 242 31 discriminator 5 view .LVU282
 880 048a C3E7     		b	.L28
 881              	.LVL44:
 882              	.L30:
 243:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_W  = (uint16_t)CLAMP(wr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 883              		.loc 1 243 41 discriminator 2 view .LVU283
 884 048c 02F57A71 		add	r1, r2, #1000
 243:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_W  = (uint16_t)CLAMP(wr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 885              		.loc 1 243 31 discriminator 2 view .LVU284
 886 0490 8B42     		cmp	r3, r1
 887 0492 01DC     		bgt	.L32
 243:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_W  = (uint16_t)CLAMP(wr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 888              		.loc 1 243 41 discriminator 4 view .LVU285
 889 0494 8AB2     		uxth	r2, r1
 890              	.LVL45:
 243:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_W  = (uint16_t)CLAMP(wr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 891              		.loc 1 243 41 discriminator 4 view .LVU286
 892 0496 C6E7     		b	.L31
 893              	.LVL46:
 894              	.L32:
 243:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_W  = (uint16_t)CLAMP(wr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 895              		.loc 1 243 31 discriminator 5 view .LVU287
 896 0498 9AB2     		uxth	r2, r3
 897              	.LVL47:
 243:Src/bldc.c    ****     RIGHT_TIM->RIGHT_TIM_W  = (uint16_t)CLAMP(wr + pwm_res / 2, pwm_margin, pwm_res-pwm_margin);
 898              		.loc 1 243 31 discriminator 5 view .LVU288
 899 049a C4E7     		b	.L31
 900              	.LVL48:
 901              	.L33:
 244:Src/bldc.c    ****   // =================================================================
 902              		.loc 1 244 41 discriminator 2 view .LVU289
 903 049c 0CF57A72 		add	r2, ip, #1000
 244:Src/bldc.c    ****   // =================================================================
 904              		.loc 1 244 31 discriminator 2 view .LVU290
 905 04a0 9342     		cmp	r3, r2
 906 04a2 01DC     		bgt	.L35
 244:Src/bldc.c    ****   // =================================================================
 907              		.loc 1 244 41 discriminator 4 view .LVU291
 908 04a4 93B2     		uxth	r3, r2
 909 04a6 C7E7     		b	.L34
 910              	.L35:
 244:Src/bldc.c    ****   // =================================================================
 911              		.loc 1 244 31 discriminator 5 view .LVU292
 912 04a8 9BB2     		uxth	r3, r3
 913 04aa C5E7     		b	.L34
 914              	.L49:
 915              		.align	2
 916              	.L48:
 917 04ac 00000000 		.word	.LANCHOR24
 918 04b0 000C0140 		.word	1073810432
 919 04b4 00000000 		.word	rtU_Left
 920 04b8 00000000 		.word	ctrlModReq
 921 04bc 00000000 		.word	.LANCHOR25
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 23


 922 04c0 00000000 		.word	.LANCHOR10
 923 04c4 00000000 		.word	.LANCHOR11
 924 04c8 00000000 		.word	.LANCHOR12
 925 04cc 00000000 		.word	rtM_Left
 926 04d0 00000000 		.word	rtY_Left
 927 04d4 00000000 		.word	.LANCHOR22
 928 04d8 00340140 		.word	1073820672
 929 04dc 00100140 		.word	1073811456
 930 04e0 00000000 		.word	rtU_Right
 931 04e4 00000000 		.word	.LANCHOR26
 932 04e8 00000000 		.word	.LANCHOR13
 933 04ec 00000000 		.word	.LANCHOR14
 934 04f0 00000000 		.word	.LANCHOR15
 935 04f4 00000000 		.word	rtM_Right
 936 04f8 00000000 		.word	rtY_Right
 937 04fc 002C0140 		.word	1073818624
 938 0500 00000000 		.word	.LANCHOR23
 939              		.cfi_endproc
 940              	.LFE66:
 942              		.global	batVoltage
 943              		.global	enable
 944              		.global	buzzerTimer
 945              		.global	buzzerCount
 946              		.global	buzzerPattern
 947              		.global	buzzerFreq
 948              		.global	pwmr
 949              		.global	pwml
 950              		.global	curR_DC
 951              		.global	curR_phaC
 952              		.global	curR_phaB
 953              		.global	curL_DC
 954              		.global	curL_phaB
 955              		.global	curL_phaA
 956              		.section	.bss.OverrunFlag.0,"aw",%nobits
 957              		.set	.LANCHOR23,. + 0
 960              	OverrunFlag.0:
 961 0000 00       		.space	1
 962              		.section	.bss.buzzerCount,"aw",%nobits
 963              		.set	.LANCHOR21,. + 0
 966              	buzzerCount:
 967 0000 00       		.space	1
 968              		.section	.bss.buzzerFreq,"aw",%nobits
 969              		.set	.LANCHOR17,. + 0
 972              	buzzerFreq:
 973 0000 00       		.space	1
 974              		.section	.bss.buzzerIdx,"aw",%nobits
 975              		.set	.LANCHOR20,. + 0
 978              	buzzerIdx:
 979 0000 00       		.space	1
 980              		.section	.bss.buzzerPattern,"aw",%nobits
 981              		.set	.LANCHOR18,. + 0
 984              	buzzerPattern:
 985 0000 00       		.space	1
 986              		.section	.bss.buzzerPrev,"aw",%nobits
 987              		.set	.LANCHOR19,. + 0
 990              	buzzerPrev:
 991 0000 00       		.space	1
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 24


 992              		.section	.bss.buzzerTimer,"aw",%nobits
 993              		.align	2
 994              		.set	.LANCHOR7,. + 0
 997              	buzzerTimer:
 998 0000 00000000 		.space	4
 999              		.section	.bss.curL_DC,"aw",%nobits
 1000              		.align	1
 1001              		.set	.LANCHOR12,. + 0
 1004              	curL_DC:
 1005 0000 0000     		.space	2
 1006              		.section	.bss.curL_phaA,"aw",%nobits
 1007              		.align	1
 1008              		.set	.LANCHOR10,. + 0
 1011              	curL_phaA:
 1012 0000 0000     		.space	2
 1013              		.section	.bss.curL_phaB,"aw",%nobits
 1014              		.align	1
 1015              		.set	.LANCHOR11,. + 0
 1018              	curL_phaB:
 1019 0000 0000     		.space	2
 1020              		.section	.bss.curR_DC,"aw",%nobits
 1021              		.align	1
 1022              		.set	.LANCHOR15,. + 0
 1025              	curR_DC:
 1026 0000 0000     		.space	2
 1027              		.section	.bss.curR_phaB,"aw",%nobits
 1028              		.align	1
 1029              		.set	.LANCHOR13,. + 0
 1032              	curR_phaB:
 1033 0000 0000     		.space	2
 1034              		.section	.bss.curR_phaC,"aw",%nobits
 1035              		.align	1
 1036              		.set	.LANCHOR14,. + 0
 1039              	curR_phaC:
 1040 0000 0000     		.space	2
 1041              		.section	.bss.enable,"aw",%nobits
 1042              		.set	.LANCHOR16,. + 0
 1045              	enable:
 1046 0000 00       		.space	1
 1047              		.section	.bss.enableFin,"aw",%nobits
 1048              		.set	.LANCHOR24,. + 0
 1051              	enableFin:
 1052 0000 00       		.space	1
 1053              		.section	.bss.offsetcount,"aw",%nobits
 1054              		.align	1
 1055              		.set	.LANCHOR0,. + 0
 1058              	offsetcount:
 1059 0000 0000     		.space	2
 1060              		.section	.bss.pwm_margin,"aw",%nobits
 1061              		.align	1
 1062              		.set	.LANCHOR22,. + 0
 1065              	pwm_margin:
 1066 0000 0000     		.space	2
 1067              		.section	.bss.pwml,"aw",%nobits
 1068              		.align	2
 1069              		.set	.LANCHOR25,. + 0
 1072              	pwml:
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 25


 1073 0000 00000000 		.space	4
 1074              		.section	.bss.pwmr,"aw",%nobits
 1075              		.align	2
 1076              		.set	.LANCHOR26,. + 0
 1079              	pwmr:
 1080 0000 00000000 		.space	4
 1081              		.section	.data.batVoltage,"aw"
 1082              		.align	1
 1083              		.set	.LANCHOR9,. + 0
 1086              	batVoltage:
 1087 0000 DF05     		.short	1503
 1088              		.section	.data.batVoltageFixdt,"aw"
 1089              		.align	2
 1090              		.set	.LANCHOR8,. + 0
 1093              	batVoltageFixdt:
 1094 0000 0000DF05 		.word	98500608
 1095              		.section	.data.offsetdcl,"aw"
 1096              		.align	1
 1097              		.set	.LANCHOR5,. + 0
 1100              	offsetdcl:
 1101 0000 D007     		.short	2000
 1102              		.section	.data.offsetdcr,"aw"
 1103              		.align	1
 1104              		.set	.LANCHOR6,. + 0
 1107              	offsetdcr:
 1108 0000 D007     		.short	2000
 1109              		.section	.data.offsetrlA,"aw"
 1110              		.align	1
 1111              		.set	.LANCHOR1,. + 0
 1114              	offsetrlA:
 1115 0000 D007     		.short	2000
 1116              		.section	.data.offsetrlB,"aw"
 1117              		.align	1
 1118              		.set	.LANCHOR2,. + 0
 1121              	offsetrlB:
 1122 0000 D007     		.short	2000
 1123              		.section	.data.offsetrrB,"aw"
 1124              		.align	1
 1125              		.set	.LANCHOR3,. + 0
 1128              	offsetrrB:
 1129 0000 D007     		.short	2000
 1130              		.section	.data.offsetrrC,"aw"
 1131              		.align	1
 1132              		.set	.LANCHOR4,. + 0
 1135              	offsetrrC:
 1136 0000 D007     		.short	2000
 1137              		.text
 1138              	.Letext0:
 1139              		.file 2 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.10/gcc/arm-none-eabi/include/machine/_de
 1140              		.file 3 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.10/gcc/arm-none-eabi/include/sys/_stdint
 1141              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1142              		.file 5 "Inc/defines.h"
 1143              		.file 6 "Inc/rtwtypes.h"
 1144              		.file 7 "Inc/BLDC_controller.h"
 1145              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1146              		.file 9 "Inc/util.h"
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bldc.c
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:18     .text.DMA1_Channel1_IRQHandler:0000000000000000 $t
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:24     .text.DMA1_Channel1_IRQHandler:0000000000000000 DMA1_Channel1_IRQHandler
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:480    .text.DMA1_Channel1_IRQHandler:0000000000000268 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:516    .text.DMA1_Channel1_IRQHandler:00000000000002f0 $t
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:917    .text.DMA1_Channel1_IRQHandler:00000000000004ac $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1086   .data.batVoltage:0000000000000000 batVoltage
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1045   .bss.enable:0000000000000000 enable
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:997    .bss.buzzerTimer:0000000000000000 buzzerTimer
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:966    .bss.buzzerCount:0000000000000000 buzzerCount
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:984    .bss.buzzerPattern:0000000000000000 buzzerPattern
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:972    .bss.buzzerFreq:0000000000000000 buzzerFreq
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1079   .bss.pwmr:0000000000000000 pwmr
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1072   .bss.pwml:0000000000000000 pwml
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1025   .bss.curR_DC:0000000000000000 curR_DC
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1039   .bss.curR_phaC:0000000000000000 curR_phaC
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1032   .bss.curR_phaB:0000000000000000 curR_phaB
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1004   .bss.curL_DC:0000000000000000 curL_DC
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1018   .bss.curL_phaB:0000000000000000 curL_phaB
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1011   .bss.curL_phaA:0000000000000000 curL_phaA
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:960    .bss.OverrunFlag.0:0000000000000000 OverrunFlag.0
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:961    .bss.OverrunFlag.0:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:967    .bss.buzzerCount:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:973    .bss.buzzerFreq:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:978    .bss.buzzerIdx:0000000000000000 buzzerIdx
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:979    .bss.buzzerIdx:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:985    .bss.buzzerPattern:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:990    .bss.buzzerPrev:0000000000000000 buzzerPrev
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:991    .bss.buzzerPrev:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:993    .bss.buzzerTimer:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1000   .bss.curL_DC:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1007   .bss.curL_phaA:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1014   .bss.curL_phaB:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1021   .bss.curR_DC:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1028   .bss.curR_phaB:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1035   .bss.curR_phaC:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1046   .bss.enable:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1051   .bss.enableFin:0000000000000000 enableFin
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1052   .bss.enableFin:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1054   .bss.offsetcount:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1058   .bss.offsetcount:0000000000000000 offsetcount
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1061   .bss.pwm_margin:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1065   .bss.pwm_margin:0000000000000000 pwm_margin
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1068   .bss.pwml:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1075   .bss.pwmr:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1082   .data.batVoltage:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1089   .data.batVoltageFixdt:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1093   .data.batVoltageFixdt:0000000000000000 batVoltageFixdt
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1096   .data.offsetdcl:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1100   .data.offsetdcl:0000000000000000 offsetdcl
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1103   .data.offsetdcr:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1107   .data.offsetdcr:0000000000000000 offsetdcr
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1110   .data.offsetrlA:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1114   .data.offsetrlA:0000000000000000 offsetrlA
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1117   .data.offsetrlB:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1121   .data.offsetrlB:0000000000000000 offsetrlB
ARM GAS  /var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s 			page 27


/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1124   .data.offsetrrB:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1128   .data.offsetrrB:0000000000000000 offsetrrB
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1131   .data.offsetrrC:0000000000000000 $d
/var/folders/2w/5wbrmvx534s_vk8svtxz852c0000gn/T//ccc2W3Q0.s:1135   .data.offsetrrC:0000000000000000 offsetrrC

UNDEFINED SYMBOLS
HAL_GPIO_TogglePin
filtLowPass32
HAL_GPIO_WritePin
adc_buffer
rtP_Left
rtY_Left
rtY_Right
BLDC_controller_step
rtU_Left
ctrlModReq
rtM_Left
rtU_Right
rtM_Right
